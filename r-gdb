define dumpsxp 
	if $arg0==0
		printf "uninitialized variable\n"
		return
	end
	
	set $sexptype=TYPEOF($arg0)

	# Typename
	printf "Type: %s (%d)\n", typename($arg0), $sexptype

	# SYMSXP
	if $sexptype==1
		# CHAR(PRINTNAME(x))
		print_char PRINTNAME($arg0)
	end

	# LISTSXP 
	if $sexptype==2  
		printf "(%s,%s)\n", typename(CAR($arg0)), typename(CDR($arg0)) 
	end

	# CLOSXP
	if $sexptype==3
		dumpsxp BODY($arg0)
	end

	# PROMSXP
	# Promises contain pointers to value, expr and env
	# tmp = eval(tmp, rho);
	if $sexptype==5
		printf "Promise under evaluation: %d\n", PRSEEN($arg0) 	
		printf "Expression: "	
		dumpsxp ($arg0)->u.promsxp.expr
		# Expression: (CAR(chain))->u.promsxp.expr
	end

	# LANGSXP
	if $sexptype==6
		printf "Function:"
		dumpsxp CAR($arg0)
		printf "Args:"
		dumpsxp CDR($arg0)
	end
	
	# SPECIALSXP
	if $sexptype==7
		printf "Special function: %s\n", R_FunTab[($arg0)->u.primsxp.offset].name
	end

	# BUILTINSXP
	if $sexptype==8
		printf "Function: %s\n", R_FunTab[($arg0)->u.primsxp.offset].name
	end

	# CHARSXP
	if $sexptype==9
		printf "length=%d\n", ((VECTOR_SEXPREC)(*$arg0))->vecsxp.length
		#print_veclen $arg0
		print_char $arg0
	end

	# LGLSXP
	if $sexptype==10
		set $lgl=*LOGICAL($arg0)
		if $lgl > 0 
			printf "TRUE\n"
		end
		if $lgl == 0
			printf "FALSE\n"
		end
	end
	
	# INTSXP
	if $sexptype==13
		printf "%d\n", *(INTEGER($arg0))
	end

	# REALSXP
	if $sexptype==14
		print_veclen $arg0
		print_double $arg0
	end
 	
	# STRSXP      
        if $sexptype==16
		print_veclen $arg0
		set $i=LENGTH($arg0)
		set $count=0
		while ($count < $i) 
			printf "Element #%d:\n", $count
			dumpsxp STRING_ELT($arg0,$count) 
			set $count = $count + 1
		end
	end

	# VECSXP
	if $sexptype==19
		print_veclen $arg0
	end	

	# RAWSXP
	if $sexptype==24		
		print_veclen $arg0
	end

end

define print_veclen
	printf "Vector length=%d\n", LENGTH($arg0)
end

define print_char 
		# this may be a bit dodgy, as I am not using the aligned union
		printf "\"%s\"\n", (const char*)((VECTOR_SEXPREC *) ($arg0)+1) 
end

define print_double
		printf "%g\n", (double*)((VECTOR_SEXPREC *) ($arg0)+1) 
end
